import random
import itertools


class pack(object):
    class poke(object):
        def __init__(self, color0, number0):  # 生成一张卡牌
            self.color = color0
            self.number = number0
            self.owner = 'Not decided'

        def show(self):  # 展示这张卡牌
            print('%s:%s, %s' % (self.owner, self.number, self.color))

        def deal(self, owner):  # 发这张牌
            self.owner = owner

    def __init__(self):  # 生成卡牌
        self.cardList = []
        self.packColor = ['spade', 'heart', 'diamond', 'club']
        self.packPoke = []
        for color in self.packColor:
            for number in range(1, 14):
                self.packPoke.append(self.poke(color, number))
        # 本游戏不需要大小王
        # self.packPoke.append(self.poke('joker', 14))
        # self.packPoke.append(self.poke('joker', 15))

    def deal(self):  # 发牌
        index = list(range(52))
        for player in players:
            playerCard = []
            for time in range(5):
                iSelected = random.choice(index)
                self.packPoke[iSelected].deal(player)
                playerCard.append(self.packPoke[iSelected])
                index.remove(iSelected)
            self.cardList.append(playerCard)

    def sortedByPlayer(self):  # 按照玩家展示卡牌
        self.packPoke.sort(key=lambda x: x.owner)

    def show(self, playerId=None):
        if playerId is None:
            for poke in self.packPoke:
                poke.show()
        else:
            for poke in self.cardList[playerId]:
                poke.show()

    def bull(self, playerId):
        if self.cardList is None:
            print('error:没有发牌')
        else:
            card9 = 0
            card10 = 0
            for card in self.cardList[playerId]:
                if card.number > 9:
                    card9 += 1
                    if card.number > 10:
                        card10 += 1
            if card10 > 4:
                print('%s的牌为五花牛' % (players[playerId]))
                return 12
            elif card10 == 4 and card9 == 5:
                print("%s的牌为四花牛" % (players[playerId]))
                return 11
            sumLeftMax = 0
            for pokes in itertools.combinations(self.cardList[playerId], 3):
                sumSelected = 0
                for poke in pokes:
                    sumSelected += poke.number
                pokesList = list(pokes)  # 把抽出来的三张牌改成列表
                if (sumSelected % 10) == 0:
                    print('哈哈主人啊我找到牛了哇哈哈哈')
                    leftList = set(self.cardList[playerId]) - set(pokesList)
                    sumLeft = 0
                    for poke in leftList:  # 看剩下两张牌
                        sumLeft += poke.number
                    sumLeft = sumLeft % 10
                    if sumLeft == 0:  # 如果余0为十牛
                        sumLeft = 10
                    if sumLeft > sumLeftMax:  # 取最高结果
                        sumLeftMax = sumLeft
            if not sumLeftMax == 0:
                print('%s的牌为%s牛' % (players[playerId], sumLeftMax))
                return sumLeftMax
            else:
                print('%s的牌为无牛' % (players[playerId]))
                return 0


players = ['player1', 'player2', 'player3']
print('九龙湖第一家线上斗牛开业了！洗牌中，请各位主人耐心等待……')
pack1 = pack()
print('荷官离线发牌中！')
pack1.deal()
pack1.sortedByPlayer()
score = []
for i in range(0, 3):
    pack1.show(i)
    score.append(pack1.bull(i))
playerScore = dict(zip(players, score))

print('本次游戏排名为：', [k for k in sorted(playerScore.keys())])
